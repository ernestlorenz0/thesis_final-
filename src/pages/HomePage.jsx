// =========================
// Imports
// =========================
import React, { useRef, useState, useEffect } from 'react';
import { User, Upload, Settings, HelpCircle, LogOut, Loader2 } from 'lucide-react';
import Reveal from 'reveal.js'; // For future integration, placeholder for now
import { themeComponents as themeRegistry, themeNames } from '../utils/themes';
import { saveHistoryItem } from '../firebaseAuth';
import SlideEditor from './SlideEditor';
import UserMenuDropdown from '../components/UserMenuDropdown';
import TemplateThumbnail from '../components/TemplateThumbnail';
import MenuMobile from '../components/MenuMobile';
import { useUserMenuDropdown, useMenuMobile } from '../hooks/useMenus';
import { getPlaceholderSlides } from "../components/placeholderSlides";

// =========================
// HomePage Component
// =========================
export default function HomePage() {
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [uploadedFiles, setUploadedFiles] = useState([]); // Array of File
  const [showTemplates, setShowTemplates] = useState(false);
  const [selectedTemplate, setSelectedTemplate] = useState(null);
  const [results, setResults] = useState(null); // Gemini results
  const [showEditor, setShowEditor] = useState(false);
  // Removed manual image generation - now handled automatically
  // const [imagePrompt, setImagePrompt] = useState(''); // No longer needed
  const fileInputRef = useRef();

  

    // =========================
  // Handlers
  // =========================
  // Handle adding files to the upload list
  const handleFileChange = (e) => {
    setError('');
    const files = Array.from(e.target.files);
    if (!files.length) return;
    if (files.some(f => f.type !== 'application/pdf')) {
      setError('Please upload PDF files only.');
      return;
    }
    if (files.some(f => f.size > 5 * 1024 * 1024)) {
      setError('Each file must be max 5MB.');
      return;
    }
    setUploadedFiles(prev => [...prev, ...files]);
    if (fileInputRef.current) fileInputRef.current.value = '';
  };

  // Remove a file from the upload list
  const handleRemoveFile = (idx) => {
    setUploadedFiles(prev => prev.filter((_, i) => i !== idx));
  };

  // Show template modal on Generate PowerPoint
  const handleGenerate = () => {
    setShowTemplates(true);
  };


  // Handle auto-generated images from backend
  const handleAutoGeneratedImages = (autoImages) => {
    if (!autoImages || autoImages.length === 0) {
      console.log('ℹ️ No auto-generated images to process');
      return;
    }

    try {
      console.log(`🎨 Processing ${autoImages.length} auto-generated images...`);
      const existingImages = JSON.parse(localStorage.getItem('kenbilearn_generated_images') || '[]');
      
      // Convert auto-generated images to the same format as manual images
      const formattedImages = autoImages.map(img => ({
        url: `data:image/png;base64,${img.image_base64}`,
        name: `Auto Generated: ${img.term_name}`,
        prompt: img.prompt,
        generatedAt: img.generated_at,
        termName: img.term_name,
        termDefinition: img.term_definition,
        termIndex: img.term_index,
        targetSlide: img.target_slide,
        isAutoGenerated: true
      }));
      
      // Add to existing images (auto-generated images go to the top)
      const updatedImages = [...formattedImages, ...existingImages];
      localStorage.setItem('kenbilearn_generated_images', JSON.stringify(updatedImages));
      
      console.log(`✅ Successfully stored ${formattedImages.length} auto-generated images in localStorage`);
    } catch (error) {
      console.error('❌ Failed to store auto-generated images:', error);
    }
  };

  // When a template is selected, process PDFs and show SlideEditor
  const themeNames = [
    'Classic Classroom',
    'STEM Modern',
    'Playful Primary',
    'Academic Minimal',
    'Scholarly Elegant',
    'Digital Chalkboard',
    'Science Spectrum',
    'History Heritage',
    'Art Studio',
    'Math Matrix',
    'Language Lab',
    'Tech Trends',
    'Research Ready',
    'Creative Canvas',
    'Youthful Yellow',
    'Calm Cyan',
    'Scholar Green',
    'Vibrant Violet',
    'Orange Orbit',
    'Blue Horizon',
  ];

  const [isPreviewMode, setIsPreviewMode] = useState(false);

  const handleSelectTemplate = async (templateIdx) => {
    const selectedThemeName = themeNames[templateIdx];
    setSelectedTemplate(selectedThemeName);
    setShowTemplates(false);

    // If in preview mode, create preview slides
    if (isPreviewMode) {
      const themeModule = themeRegistry[selectedThemeName];
      if (!themeModule) {
        setShowEditor(true);
        return;
      }

      const previewSlides = [];

      // Use the same mapping logic as the main generation
      const mapThemeSlidesToSequence = (themeModule) => {
        const availableSlides = Object.keys(themeModule).filter(k => typeof themeModule[k] === 'function');
        const mapping = {};
        
        // Map TitleSlide
        if (availableSlides.includes('TitleSlide')) {
          mapping['TitleSlide'] = 'TitleSlide';
        }
        
        // Map TOCSlide
        if (availableSlides.includes('TOCSlide')) {
          mapping['TOCSlide'] = 'TOCSlide';
        }
        
        // Map ImageSlide (or similar)
        const imageSlideNames = ['ImageSlide', 'SectionSlide', 'MainSlide4'];
        for (const name of imageSlideNames) {
          if (availableSlides.includes(name)) {
            mapping['ImageSlide'] = name;
            break;
          }
        }
        
        // Map MainSlide1 (or MainSlide)
        // Map MainSlide2
        if (availableSlides.includes('MainSlide')) {
          mapping['MainSlide'] = 'MainSlide';
        }
        
        // Map MainSlide1
        if (availableSlides.includes('MainSlide1')) {
          mapping['MainSlide1'] = 'MainSlide1';
        }

        // Map MainSlide2
        if (availableSlides.includes('MainSlide2')) {
          mapping['MainSlide2'] = 'MainSlide2';
        }
        
        // Map MainSlide3
        if (availableSlides.includes('MainSlide3')) {
          mapping['MainSlide3'] = 'MainSlide3';
        }
        
        // Map MainSlide4
        if (availableSlides.includes('MainSlide4')) {
          mapping['MainSlide4'] = 'MainSlide4';
        }
        
        // Map MainSlide5
        if (availableSlides.includes('MainSlide5')) {
          mapping['MainSlide5'] = 'MainSlide5';
        }
        
        // Map MainSlide6
        if (availableSlides.includes('MainSlide6')) {
          mapping['MainSlide6'] = 'MainSlide6';
        }
        
        // Map EndSlide
        if (availableSlides.includes('EndSlide')) {
          mapping['EndSlide'] = 'EndSlide';
        }
        
        return mapping;
      };

      const slideMapping = mapThemeSlidesToSequence(themeModule);
      if (!slideMapping || Object.keys(slideMapping).length === 0) {
        console.error('No valid slide mappings found for preview');
        setError('No valid slide layouts found for the selected template');
        return;
      }

      // Define the proper slide sequence for preview
      const previewSequence = ['TitleSlide', 'TOCSlide', 'ImageSlide','MainSlide', 'MainSlide1', 'MainSlide2', 'MainSlide3', 'MainSlide4', 'MainSlide5', 'MainSlide6', 'EndSlide'];

      previewSequence.forEach((layoutName, idx) => {
        if (slideMapping && slideMapping[layoutName]) {
          const slide = {
            id: `preview-${layoutName}-${idx}-${Date.now()}`,
            layout: slideMapping[layoutName],
            components: []
          };

          if (layoutName === 'TitleSlide') {
            slide.components = [
              { id: 'title', type: 'title', content: selectedThemeName + ' — Title' },
              { id: 'subtitle', type: 'paragraph', content: 'Subtitle placeholder' }
            ];
          } else if (layoutName === 'TOCSlide') {
            slide.components = [
              { id: 'toc', type: 'toc', content: 'Table of Contents' },
              { id: 'toc-item-1', type: 'toc_item', content: 'Introduction to the Topic' },
              { id: 'toc-item-2', type: 'toc_item', content: 'Key Concepts and Definitions' },
              { id: 'toc-item-3', type: 'toc_item', content: 'Historical Background' },
              { id: 'toc-item-4', type: 'toc_item', content: 'Current Applications' },
              { id: 'toc-item-5', type: 'toc_item', content: 'Case Studies and Examples' },
              { id: 'toc-item-6', type: 'toc_item', content: 'Future Implications' },
              { id: 'toc-item-7', type: 'toc_item', content: 'Conclusion and Q&A' }
            ];
          } else if (layoutName === 'ImageSlide') {
            slide.components = [
              { id: 'img-title', type: 'title', content: 'Image Slide' },
              { id: 'img-placeholder', type: 'image', content: '' }
            ];
          } else if (layoutName.startsWith('MainSlide')) {
            slide.components = [
              { id: `title-${idx}`, type: 'title', content: layoutName },
              { id: `para-${idx}`, type: 'paragraph', content: 'This is a placeholder paragraph to check alignment and layout.' }
            ];
          } else if (layoutName === 'EndSlide') {
            slide.components = [
              { id: 'end', type: 'title', content: 'Thank You!' },
              { id: 'closing', type: 'paragraph', content: 'Closing remarks here.' }
            ];
          }

          previewSlides.push(slide);
        }
      });

      setResults(previewSlides);
      setShowEditor(true);
      setIsPreviewMode(false); // Reset preview mode
      return;
    }

    // Existing API flow with automatic image generation
    setLoading(true);
    setError('');
    console.log('🚀 Starting PDF processing with automatic image generation...');
    try {
      
      // Auto-generated images will be handled in the backend response
      
      const formData = new FormData();
      uploadedFiles.forEach(f => formData.append('file', f));
      
      const res = await fetch('http://127.0.0.1:5000/upload', {
        method: 'POST',
        body: formData,
      });
      
      if (!res.ok) {
        throw new Error(`HTTP error! status: ${res.status}`);
      }
      
      const data = await res.json();
      
      if (!data.success) throw new Error(data.error || 'Unknown error');
      const errorFiles = data.results.filter(file => file.error);
      if (errorFiles.length > 0) {
        setError('Some files failed to process: ' + errorFiles.map(f => `${f.filename}: ${f.error}`).join('; '));
        setLoading(false);
        return;
      }
      
      // Handle auto-generated images from all processed files
      const allAutoImages = [];
      data.results.forEach(result => {
        if (result.auto_generated_images && result.auto_generated_images.length > 0) {
          allAutoImages.push(...result.auto_generated_images);
        }
      });
      
      if (allAutoImages.length > 0) {
        console.log(`🎉 Received ${allAutoImages.length} auto-generated images from backend`);
        handleAutoGeneratedImages(allAutoImages);
      }
      const slides = [];
      const globalSeenTerms = new Set();
      let slideIndex = 0;
      
      // Define the slide layout sequence - we'll map theme-specific names to our standard sequence
      const standardSequence = ['TitleSlide', 'TOCSlide', 'ImageSlide', 'MainSlide1', 'MainSlide2', 'MainSlide3', 'MainSlide4', 'MainSlide5', 'MainSlide6', 'EndSlide'];
      
      // Map theme-specific slide names to our standard sequence
      const mapThemeSlidesToSequence = (themeModule) => {
        const availableSlides = Object.keys(themeModule).filter(k => typeof themeModule[k] === 'function');
        const mapping = {};
        
        // Map TitleSlide
        if (availableSlides.includes('TitleSlide')) {
          mapping['TitleSlide'] = 'TitleSlide';
        }
        
        // Map TOCSlide
        if (availableSlides.includes('TOCSlide')) {
          mapping['TOCSlide'] = 'TOCSlide';
        }
        
        // Map ImageSlide (or similar)
        const imageSlideNames = ['ImageSlide', 'SectionSlide', 'MainSlide4'];
        for (const name of imageSlideNames) {
          if (availableSlides.includes(name)) {
            mapping['ImageSlide'] = name;
            break;
          }
        }
        
        // Map MainSlide1 (or MainSlide)
        if (availableSlides.includes('MainSlide1')) {
          mapping['MainSlide1'] = 'MainSlide1';
        } else if (availableSlides.includes('MainSlide')) {
          mapping['MainSlide1'] = 'MainSlide';
        }
        
        // Map MainSlide2
        if (availableSlides.includes('MainSlide2')) {
          mapping['MainSlide2'] = 'MainSlide2';
        }
        
        // Map MainSlide3
        if (availableSlides.includes('MainSlide3')) {
          mapping['MainSlide3'] = 'MainSlide3';
        }
        
        // Map MainSlide4
        if (availableSlides.includes('MainSlide4')) {
          mapping['MainSlide4'] = 'MainSlide4';
        }
        
        // Map MainSlide5
        if (availableSlides.includes('MainSlide5')) {
          mapping['MainSlide5'] = 'MainSlide5';
        }
        
        // Map MainSlide6
        if (availableSlides.includes('MainSlide6')) {
          mapping['MainSlide6'] = 'MainSlide6';
        }
        
        // Map EndSlide
        if (availableSlides.includes('EndSlide')) {
          mapping['EndSlide'] = 'EndSlide';
        }
        
        return mapping;
      };
      
      const themeModule = themeRegistry[selectedThemeName];
      if (!themeModule) {
        throw new Error(`Theme module not found for template: ${selectedThemeName}`);
      }
      
      const slideMapping = mapThemeSlidesToSequence(themeModule);
      if (!slideMapping || Object.keys(slideMapping).length === 0) {
        throw new Error(`No valid slide mappings found for template: ${selectedThemeName}`);
      }
      
      const mainSlideLayouts = ['MainSlide1', 'MainSlide2', 'MainSlide3', 'MainSlide4', 'MainSlide5', 'MainSlide6'].filter(key => slideMapping[key]);
      
      // Debug logging
      
      // Add title slide
      if (slideMapping['TitleSlide']) {
        const firstFileName = data.results && data.results.length > 0 ? data.results[0].filename.replace(/\.pdf$/i, '') : 'Generated Presentation';
        slides.push({
          id: `title-${firstFileName}-${Date.now()}`,
          layout: slideMapping['TitleSlide'],
          components: [
            { id: 'title', type: 'title', content: firstFileName.replace(/\.pdf$/i, '').trim() },
            { id: 'subtitle', type: 'paragraph', content: 'Created from uploaded PDFs' },
          ],
        });
      }
      
      // Add TOC slide with generated content
      if (slideMapping['TOCSlide']) {
        // Collect TOC data from all files
        let combinedTOC = null;
        for (const file of data.results) {
          if (file.toc && file.toc.sections && file.toc.sections.length > 0) {
            combinedTOC = file.toc;
            break; // Use the first valid TOC
          }
        }
        
        // Fallback to default TOC if no generated TOC available
        if (!combinedTOC) {
          combinedTOC = {
            title: "Table of Contents",
            sections: [
              { 
                title: "Introduction and Problem Statement", 
                categories: [
                  { name: "Problem Statement and Background", terms: ["Research Context", "Problem Definition", "Literature Review", "Scope Analysis"] },
                  { name: "Research Objectives and Methodology", terms: ["Primary Goals", "Research Questions", "Methodology Framework", "Study Design"] }
                ]
              },
              { 
                title: "Theoretical Framework and Key Concepts", 
                categories: [
                  { name: "Theoretical Framework and Definitions", terms: ["Core Concepts", "Mathematical Models", "System Theory", "Technical Definitions"] },
                  { name: "Fundamental Principles and Methods", terms: ["Algorithm Design", "Implementation Methods", "System Architecture", "Design Patterns"] }
                ]
              },
              { 
                title: "System Implementation and Analysis", 
                categories: [
                  { name: "Analysis Methods and Techniques", terms: ["Data Analysis", "Performance Metrics", "Statistical Methods", "Validation Techniques"] },
                  { name: "Practical Applications and Implementation", terms: ["Real-world Examples", "System Implementation", "Use Case Studies", "Deployment Strategies"] }
                ]
              },
              { 
                title: "Results and Future Research Directions", 
                categories: [
                  { name: "Research Findings and Results", terms: ["Experimental Results", "Performance Analysis", "Key Findings", "Statistical Outcomes"] },
                  { name: "Future Work and Research Directions", terms: ["Research Extensions", "Future Studies", "Improvement Areas", "Technology Trends"] }
                ]
              }
            ]
          };
        }
        
        slides.push({
          id: `toc-${Date.now()}`,
          layout: slideMapping['TOCSlide'],
          components: [
            { 
              id: 'toc', 
              type: 'toc', 
              content: combinedTOC.title,
              tocData: combinedTOC // Store the full TOC data for theme components
            }
          ],
        });
      }
      
      // Collect all content for distribution
      const allContent = [];
      
      for (const file of data.results) {
        // Skip adding file title as content since we already have it in the title slide
        
        // Add extracted images
        if (file.extracted_images && Array.isArray(file.extracted_images)) {
          file.extracted_images.forEach((imgPath, idx) => {
            allContent.push({
              type: 'image',
              content: `http://127.0.0.1:5000/${imgPath.replace(/\\/g, "/")}`,
              source: 'extracted_image'
            });
          });
        }
        
        // Add terms with their definitions together
        (file.terms || []).forEach(term => {
          if (!globalSeenTerms.has(term.term)) {
            allContent.push({
              type: 'term_definition',
              title: term.term,
              content: term.definition,
              source: 'term_with_definition'
            });
            globalSeenTerms.add(term.term);
          }
        });
      }
      
      // Get auto-generated images for injection
      const autoImages = allAutoImages || [];
      console.log(`🖼️ Auto-generated images available for injection: ${autoImages.length}`);
      
      // Distribute content across slides following the sequence
      let currentLayoutIndex = 2; // Start after TitleSlide and TOCSlide
      let mainSlideIndex = 0;
      let termSlideCount = 0; // Track which term slide we're on
      
      for (let i = 0; i < allContent.length; i++) {
        const content = allContent[i];
        if (!content) {
          continue;
        }
        
        let layout;
        
        if (currentLayoutIndex >= 2 && currentLayoutIndex <= 8) {
          // Handle ImageSlide (index 2) and MainSlides (index 3-8) the same way
          let slideKey;
          if (currentLayoutIndex === 2) {
            slideKey = 'ImageSlide';
          } else {
            slideKey = ['MainSlide1', 'MainSlide2', 'MainSlide3', 'MainSlide4', 'MainSlide5', 'MainSlide6'][currentLayoutIndex - 3];
          }
          
          if (slideMapping && slideMapping[slideKey]) {
            layout = slideMapping[slideKey];
            currentLayoutIndex++;
            if (currentLayoutIndex > 8) {
              currentLayoutIndex = 4; // Reset to MainSlide2 for repetition (skip MainSlide only)
              mainSlideIndex++;
            }
          } else {
            // Skip this slide type if not available
            currentLayoutIndex++;
            if (currentLayoutIndex > 8) {
              currentLayoutIndex = 4; // Reset to MainSlide2 for repetition (skip MainSlide only)
            }
            continue;
          }
        } else {
          // Skip if no valid layout
          continue;
        }
        
        // Create slide with appropriate layout
        const slide = {
          id: `slide-${i}-${Date.now()}`,
          layout: layout,
          components: []
        };
        
        // Track if this slide should get an auto-generated image
        let autoImageIndex = -1;
        if (layout === slideMapping['ImageSlide']) {
          // ImageSlide gets 1st auto-generated image
          autoImageIndex = 0;
          console.log(`📍 ImageSlide detected - will get auto-image ${autoImageIndex + 1}`);
        } else if (layout === slideMapping['MainSlide1']) {
          // MainSlide1 gets 2nd auto-generated image  
          autoImageIndex = 1;
          console.log(`📍 MainSlide1 detected - will get auto-image ${autoImageIndex + 1}`);
        }
        
        // Helper function to clean content
        const cleanContent = (text) => {
          if (!text) return '';
          return String(text)
            .trim()
            .replace(/\s+/g, ' ') // Replace multiple spaces with single space
            .replace(/^\d+\)\s*/, '') // Remove leading numbers like "1) " or "1970s) "
            .replace(/^[:\-]\s*/, '') // Remove leading colons or dashes
            .replace(/^\([^)]*\)\s*/, '') // Remove leading parentheses like "(1970s) "
            .replace(/^[A-Za-z]+\s*\)\s*/, '') // Remove text followed by closing parenthesis like "1970s) "
            .trim();
        };

        // Add content based on type
        if (content.type === 'title') {
          slide.components.push({
            id: `title-${i}`,
            type: 'title',
            content: cleanContent(content.content)
          });
        } else if (content.type === 'paragraph') {
          slide.components.push({
            id: `paragraph-${i}`,
            type: 'paragraph',
            content: cleanContent(content.content)
          });
        } else if (content.type === 'image') {
          slide.components.push({
            id: `image-${i}`,
            type: 'image',
            content: content.content
          });
        } else if (content.type === 'term_definition') {
          // Add both title and paragraph for term definitions
          slide.components.push({
            id: `term-title-${i}`,
            type: 'title',
            content: cleanContent(content.title)
          });
          slide.components.push({
            id: `term-definition-${i}`,
            type: 'paragraph',
            content: cleanContent(content.content)
          });
          
          // INJECT AUTO-GENERATED IMAGE based on slide layout
          if (autoImageIndex >= 0 && autoImages.length > autoImageIndex) {
            const autoImage = autoImages[autoImageIndex];
            if (autoImage && autoImage.image_base64) {
              const imageUrl = `data:image/png;base64,${autoImage.image_base64}`;
              slide.components.push({
                id: `auto-image-${autoImageIndex}`,
                type: 'auto_generated_image',
                content: imageUrl,
                termName: autoImage.term_name,
                termIndex: autoImage.term_index,
                isAutoGenerated: true
              });
              console.log(`✅ Injected auto-generated image ${autoImageIndex + 1} for term: ${autoImage.term_name} in layout: ${layout}`);
            }
          }
        }
        
        slides.push(slide);
      }
      
      // Always add End slide at the end
      if (slideMapping && slideMapping['EndSlide']) {
        slides.push({
          id: 'end-' + Date.now(),
          layout: slideMapping['EndSlide'],
          components: [
            { id: 'end-message', type: 'title', content: 'Thank You!' },
            { id: 'end-note', type: 'paragraph', content: 'THANK YOU' },
          ],
        });
      }
      
      // Auto-generated images are now handled automatically in the backend response
      // Show success message for auto-generation if images were created
      if (allAutoImages.length > 0) {
        setTimeout(() => {
          alert(`✅ ${allAutoImages.length} images generated automatically! Check slides 4 and 5, and Assets > Generated tab.`);
        }, 1000);
      }
      
      setResults(slides);
      setUploadedFiles([]);
      setShowEditor(true);
    } catch (err) {
      console.error('Presentation generation error:', err);
      setError(`Processing failed: ${err.message || err.toString()}`);
    } finally {
      setLoading(false);
    }
  };

    // =========================
  // Responsive logic
  // =========================
  const [isMobile, setIsMobile] = useState(typeof window !== 'undefined' && window.innerWidth < 768);
  const [isTablet, setIsTablet] = useState(typeof window !== 'undefined' && window.innerWidth >= 768 && window.innerWidth < 1024);

  useEffect(() => {
    const handleResize = () => {
      setIsMobile(window.innerWidth < 768);
      setIsTablet(window.innerWidth >= 768 && window.innerWidth < 1024);
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // =========================
  // Dropdown state and Effect Hooks (via custom hooks)
  // =========================
  const { userMenuOpen, setUserMenuOpen, userMenuRef } = useUserMenuDropdown();
  const { menuOpen, setMenuOpen } = useMenuMobile();

  // =========================
  // Render
  // =========================
  return (
    <>
      {/* STI Modern Animations */}
      <style jsx>{`
        @keyframes fadeInUp {
          from { opacity: 0; transform: translateY(30px); }
          to { opacity: 1; transform: translateY(0); }
        }
        @keyframes slideInLeft {
          from { opacity: 0; transform: translateX(-50px); }
          to { opacity: 1; transform: translateX(0); }
        }
        @keyframes slideInRight {
          from { opacity: 0; transform: translateX(50px); }
          to { opacity: 1; transform: translateX(0); }
        }
        @keyframes pulse-glow {
          0%, 100% { box-shadow: 0 0 20px rgba(255, 199, 44, 0.3); }
          50% { box-shadow: 0 0 40px rgba(255, 199, 44, 0.6); }
        }
        @keyframes gradient-shift {
          0% { background-position: 0% 50%; }
          50% { background-position: 100% 50%; }
          100% { background-position: 0% 50%; }
        }
        .animate-fadeInUp { animation: fadeInUp 0.8s ease-out; }
        .animate-slideInLeft { animation: slideInLeft 0.8s ease-out; }
        .animate-slideInRight { animation: slideInRight 0.8s ease-out; }
        .animate-pulse-glow { animation: pulse-glow 2s ease-in-out infinite; }
        .gradient-text {
          background: linear-gradient(-45deg, #003D7A, #FFC72C, #003D7A, #FFC72C);
          background-size: 400% 400%;
          animation: gradient-shift 3s ease infinite;
          -webkit-background-clip: text;
          -webkit-text-fill-color: transparent;
          background-clip: text;
        }
        .modern-card {
          background: rgba(255, 255, 255, 0.95);
          backdrop-filter: blur(20px);
          border: 1px solid rgba(0, 61, 122, 0.1);
          box-shadow: 0 20px 40px rgba(0, 61, 122, 0.08);
        }
        .floating-element {
          animation: float 6s ease-in-out infinite;
        }
        @keyframes float {
          0%, 100% { transform: translateY(0px); }
          50% { transform: translateY(-15px); }
        }
      `}</style>
      
      <div className="min-h-screen relative overflow-hidden" style={{ background: 'linear-gradient(135deg, #F9F9F9 0%, #FFFFFF 100%)' }}>
        {/* STI Themed Background Elements */}
        <div className="absolute inset-0 overflow-hidden">
          <div className="absolute w-96 h-96 rounded-full blur-3xl animate-pulse top-10 -left-20" style={{ background: 'radial-gradient(circle, rgba(0, 61, 122, 0.1) 0%, rgba(255, 199, 44, 0.05) 100%)' }} />
          <div className="absolute w-80 h-80 rounded-full blur-2xl animate-bounce bottom-10 -right-20" style={{ background: 'radial-gradient(circle, rgba(255, 199, 44, 0.1) 0%, rgba(0, 61, 122, 0.05) 100%)' }} />
          <div className="absolute top-1/4 left-1/4 w-4 h-4 rotate-45 animate-spin" style={{ backgroundColor: '#FFC72C', opacity: 0.6, animationDuration: '8s' }} />
          <div className="absolute bottom-1/4 right-1/4 w-3 h-3 rounded-full animate-pulse" style={{ backgroundColor: '#003D7A', opacity: 0.5 }} />
          <div className="absolute top-1/3 right-1/5 w-5 h-5 transform rotate-45 animate-spin" style={{ backgroundColor: '#FFC72C', opacity: 0.3, animationDuration: '12s', animationDelay: '0.5s' }} />
        </div>

        {/* STI Floating Elements - Enhanced with more icons */}
        <div className="absolute inset-0 pointer-events-none overflow-hidden">
          {/* Box Icons */}
          <div className="absolute top-20 left-10 w-4 h-4 rotate-45 animate-spin" style={{ backgroundColor: '#003D7A', opacity: 0.4, animationDuration: '8s' }} />
          <div className="absolute top-32 right-16 w-3 h-3 rotate-12 animate-pulse" style={{ backgroundColor: '#FFC72C', opacity: 0.5, animationDelay: '1s' }} />
          <div className="absolute bottom-32 left-1/4 w-3 h-3 rotate-12 animate-pulse" style={{ backgroundColor: '#003D7A', opacity: 0.3, animationDelay: '2s' }} />
          <div className="absolute top-1/3 right-12 w-5 h-5 rotate-45 animate-spin" style={{ backgroundColor: '#FFC72C', opacity: 0.4, animationDuration: '10s', animationDelay: '3s' }} />
          <div className="absolute bottom-1/4 left-16 w-4 h-4 rotate-12 animate-pulse" style={{ backgroundColor: '#003D7A', opacity: 0.3, animationDelay: '4s' }} />
          <div className="absolute top-16 left-1/3 w-3 h-3 rotate-45 animate-spin" style={{ backgroundColor: '#FFC72C', opacity: 0.5, animationDuration: '12s', animationDelay: '5s' }} />
          <div className="absolute bottom-16 right-1/4 w-4 h-4 rotate-12 animate-pulse" style={{ backgroundColor: '#003D7A', opacity: 0.4, animationDelay: '6s' }} />
          <div className="absolute top-2/3 left-8 w-3 h-3 rotate-45 animate-spin" style={{ backgroundColor: '#FFC72C', opacity: 0.3, animationDuration: '9s', animationDelay: '7s' }} />
          <div className="absolute top-40 right-20 w-6 h-6 rounded-full animate-bounce" style={{ backgroundColor: '#FFC72C', opacity: 0.5, animationDelay: '1s' }} />
          <div className="absolute bottom-40 left-12 w-5 h-5 rotate-45 animate-spin" style={{ backgroundColor: '#003D7A', opacity: 0.4, animationDuration: '11s', animationDelay: '8s' }} />

          {/* Star Icons */}
          <div className="absolute top-1/2 left-5 floating-element" style={{ animationDelay: '1s' }}>
            <svg className="w-6 h-6" fill="#FFC72C" style={{ opacity: 0.4 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute bottom-20 right-1/3 floating-element" style={{ animationDelay: '4s' }}>
            <svg className="w-8 h-8" fill="#003D7A" style={{ opacity: 0.3 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute top-24 left-1/2 floating-element" style={{ animationDelay: '2s' }}>
            <svg className="w-5 h-5" fill="#FFC72C" style={{ opacity: 0.5 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute bottom-1/3 right-8 floating-element" style={{ animationDelay: '5s' }}>
            <svg className="w-4 h-4" fill="#003D7A" style={{ opacity: 0.4 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute top-1/4 right-1/4 floating-element" style={{ animationDelay: '3s' }}>
            <svg className="w-7 h-7" fill="#FFC72C" style={{ opacity: 0.3 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute bottom-1/2 left-1/3 floating-element" style={{ animationDelay: '6s' }}>
            <svg className="w-5 h-5" fill="#003D7A" style={{ opacity: 0.5 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute top-3/4 left-1/4 floating-element" style={{ animationDelay: '7s' }}>
            <svg className="w-6 h-6" fill="#FFC72C" style={{ opacity: 0.4 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute top-1/6 right-1/3 floating-element" style={{ animationDelay: '8s' }}>
            <svg className="w-4 h-4" fill="#003D7A" style={{ opacity: 0.3 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute bottom-1/6 right-1/2 floating-element" style={{ animationDelay: '9s' }}>
            <svg className="w-5 h-5" fill="#FFC72C" style={{ opacity: 0.5 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
          <div className="absolute top-5/6 right-1/6 floating-element" style={{ animationDelay: '10s' }}>
            <svg className="w-6 h-6" fill="#003D7A" style={{ opacity: 0.4 }} viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
          </div>
        </div>

        {/* STI Modern Navigation */}
        <nav className="fixed top-0 left-0 right-0 z-50" style={{ backgroundColor: 'rgba(255, 255, 255, 0.98)', backdropFilter: 'blur(20px)', borderBottom: '1px solid rgba(229, 229, 229, 0.3)' }}>
          <div className="max-w-7xl mx-auto px-6 lg:px-8">
            <div className="flex justify-between items-center h-20">
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-4">
                  <div className="p-2 rounded-xl" style={{ backgroundColor: '#F9F9F9', border: '1px solid #E5E5E5' }}>
                    <img src="/src/STI LOGOS/STI LOGO1.png" alt="STI College" className="h-10 w-auto" />
                  </div>
                  <div className="hidden lg:block">
                    <div className="text-2xl font-bold gradient-text">KenbiLearn</div>
                  </div>
                </div>
              </div>
              <div className="flex items-center space-x-4">
                <button
                  className="text-sm font-semibold px-6 py-3 rounded-xl border hover:shadow-lg transition-all duration-300"
                  style={{ color: '#003D7A', borderColor: '#E5E5E5', backgroundColor: 'white' }}
                  onClick={() => {
                    setIsPreviewMode(true);
                    setShowTemplates(true);
                  }}
                >
                  <span className="hidden sm:inline">Preview Themes</span>
                  <span className="sm:hidden">Themes</span>
                </button>
                <UserMenuDropdown userMenuOpen={userMenuOpen} setUserMenuOpen={setUserMenuOpen} userMenuRef={userMenuRef} />
              </div>
            </div>
          </div>
        </nav>

        {/* Main Content */}
        <div className="relative z-10 min-h-screen flex flex-col items-center justify-center px-4 pt-24 pb-8">
          {/* Hero Section */}
          <div className="text-center mb-12 max-w-4xl animate-fadeInUp">
            <h1 className="text-4xl md:text-6xl font-black mb-6 leading-tight">
              <span className="gradient-text">Transform PDFs into</span>
              <br />
              <span style={{ color: '#003D7A' }}>Beautiful Presentations</span>
            </h1>
            <p className="text-xl mb-8 max-w-2xl mx-auto leading-relaxed" style={{ color: '#2C2C2C' }}>
              Upload your PDF documents and let our AI generate stunning PowerPoint presentations with 
              <span className="font-semibold" style={{ color: '#003D7A' }}> intelligent content extraction</span>
            </p>
            <div className="flex justify-center">
              <div className="w-24 h-1 rounded-full" style={{ backgroundColor: '#FFC72C' }}></div>
            </div>
          </div>

          {/* Upload Section */}
          <div className="w-full max-w-2xl animate-slideInRight">
            {/* STI Modern Upload Container */}
            <div className="relative group">
              <div className="absolute inset-0 rounded-3xl blur-xl group-hover:blur-2xl transition-all duration-300" style={{ background: 'linear-gradient(135deg, rgba(0, 61, 122, 0.2) 0%, rgba(255, 199, 44, 0.2) 100%)' }} />
              <div className="relative modern-card rounded-3xl p-8" style={{ border: '1px solid rgba(0, 61, 122, 0.1)' }}>
                
                {/* Upload Area */}
                <label htmlFor="pdf-upload" className="block cursor-pointer">
                  <div className="border-2 border-dashed rounded-2xl py-12 px-6 text-center transition-all duration-300 group" style={{ borderColor: '#E5E5E5' }} onMouseEnter={e => e.target.style.borderColor = '#FFC72C'} onMouseLeave={e => e.target.style.borderColor = '#E5E5E5'}>
                    {loading ? (
                      <div className="flex flex-col items-center">
                        <Loader2 className="animate-spin mb-4" size={48} style={{ color: '#003D7A' }} />
                        <span className="text-lg font-semibold" style={{ color: '#003D7A' }}>
                          Processing PDFs and generating images automatically...
                        </span>
                      </div>
                    ) : (
                      <div className="flex flex-col items-center">
                        <div className="mb-6 p-4 rounded-full transition-all duration-300 animate-pulse-glow" style={{ backgroundColor: '#F9F9F9', border: '2px solid #E5E5E5' }}>
                          <Upload size={48} style={{ color: '#003D7A' }} />
                        </div>
                        <h3 className="text-2xl font-bold mb-3" style={{ color: '#003D7A' }}>Upload PDF Documents</h3>
                        <p className="text-lg mb-2" style={{ color: '#2C2C2C' }}>Drop your files here or click to browse</p>
                        <p className="text-sm" style={{ color: '#666666' }}>(Max 5MB each, multiple files allowed)</p>
                      </div>
                    )}
                  </div>
                  <input
                    id="pdf-upload"
                    type="file"
                    accept="application/pdf"
                    className="hidden"
                    ref={fileInputRef}
                    onChange={handleFileChange}
                    disabled={loading}
                    multiple
                  />
                </label>

                {/* Image Generation Prompt */}
                <div className="mt-6">
                  <label className="block font-semibold text-sm mb-3" style={{ color: '#003D7A' }}>
                    AI Image Generation Prompt (Optional)
                  </label>
                  {/* Manual image generation removed - now handled automatically */}
                  <div className="bg-blue-50 border border-blue-200 rounded-xl p-4 text-center">
                    <div className="text-blue-700 font-medium mb-2">🎨 Automatic Image Generation</div>
                    <div className="text-blue-600 text-sm">
                      Images will be generated automatically for the first two terms from your PDF
                    </div>
                  </div>
                </div>

                {/* Error Display */}
                {error && (
                  <div className="mt-6 p-4 bg-red-50 border border-red-200 rounded-xl text-red-700 text-center text-sm">
                    {error}
                  </div>
                )}

                {/* Uploaded Files List */}
                {uploadedFiles.length > 0 && (
                  <div className="mt-6">
                    <h3 className="font-semibold mb-3 text-sm" style={{ color: '#003D7A' }}>Files Ready for Processing:</h3>
                    <div className="space-y-2 max-h-32 overflow-y-auto">
                      {uploadedFiles.map((file, idx) => (
                        <div key={idx} className="flex items-center justify-between p-3 bg-white rounded-lg border transition-all duration-300 hover:shadow-md" style={{ borderColor: '#E5E5E5' }}>
                          <div className="flex items-center">
                            <svg className="w-5 h-5 mr-3" fill="#FF4444" viewBox="0 0 24 24">
                              <path d="M14,2H6A2,2 0 0,0 4,4V20A2,2 0 0,0 6,22H18A2,2 0 0,0 20,20V8L14,2M18,20H6V4H13V9H18V20Z" />
                            </svg>
                            <span className="truncate max-w-xs text-sm" style={{ color: '#2C2C2C' }}>{file.name}</span>
                          </div>
                          <button
                            onClick={() => handleRemoveFile(idx)}
                            className="ml-3 transition-colors duration-200"
                            style={{ color: '#666666' }}
                            onMouseEnter={e => e.target.style.color = '#FF4444'}
                            onMouseLeave={e => e.target.style.color = '#666666'}
                            disabled={loading}
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}

                {/* Action Buttons */}
                <div className="flex flex-col sm:flex-row gap-4 mt-8">
                  <button
                    onClick={() => {
                      setIsPreviewMode(false);
                      setShowTemplates(true);
                    }}
                    disabled={loading || uploadedFiles.length === 0}
                    className="flex-1 relative group py-4 px-6 text-white font-bold rounded-xl shadow-lg transform hover:scale-105 transition-all duration-300 focus:outline-none focus:ring-4 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none animate-pulse-glow"
                    style={{ 
                      backgroundColor: '#003D7A',
                      '--tw-ring-color': 'rgba(255, 199, 44, 0.5)'
                    }}
                  >
                    <span className="relative z-10">
                      {loading 
                        ? "Generating Presentation with Auto Images..."
                        : "Generate PowerPoint with Auto Images"
                      }
                    </span>
                    <div className="absolute inset-0 rounded-xl opacity-0 group-hover:opacity-20 transition-opacity duration-300" style={{ backgroundColor: '#FFC72C' }} />
                  </button>
                  
                  <button
                    onClick={() => setUploadedFiles([])}
                    disabled={loading || uploadedFiles.length === 0}
                    className="sm:w-auto px-6 py-4 bg-white font-semibold rounded-xl shadow-lg border hover:shadow-xl transition-all duration-300 focus:outline-none focus:ring-4 disabled:opacity-50 disabled:cursor-not-allowed"
                    style={{ 
                      color: '#003D7A',
                      borderColor: '#E5E5E5',
                      '--tw-ring-color': 'rgba(0, 61, 122, 0.3)'
                    }}
                  >
                    Clear All
                  </button>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Slide Editor Modal */}
        {showEditor && selectedTemplate !== null && !error && (
          <div className="fixed inset-0 z-[9999] bg-black/60 backdrop-blur-sm">
            <SlideEditor
              initialSlides={results || []}
              selectedTemplate={selectedTemplate}
              onBack={() => {
                setShowEditor(false);
                setResults(null);
                setSelectedTemplate(null);
              }}
            />
          </div>
        )}

        {/* STI Template Selection Modal */}
        {showTemplates && (
          <div className="fixed inset-0 flex items-center justify-center z-[9999] p-4" style={{ backgroundColor: 'rgba(0, 0, 0, 0.6)' }}>
            <div className="relative group max-w-7xl w-full max-h-[90vh]">
              <div className="absolute inset-0 rounded-3xl blur-xl" style={{ background: 'linear-gradient(135deg, rgba(0, 61, 122, 0.2) 0%, rgba(255, 199, 44, 0.2) 100%)' }} />
              <div className="relative modern-card rounded-3xl shadow-2xl overflow-hidden" style={{ border: '1px solid rgba(0, 61, 122, 0.1)' }}>
                <div className="flex items-center justify-between px-8 pt-6 pb-4" style={{ borderBottom: '1px solid #E5E5E5' }}>
                  <h2 className="text-2xl font-bold" style={{ color: '#003D7A' }}>Choose a Template</h2>
                  <button 
                    className="text-2xl font-bold focus:outline-none transition-colors duration-200" 
                    style={{ color: '#666666' }}
                    onMouseEnter={e => e.target.style.color = '#FF4444'}
                    onMouseLeave={e => e.target.style.color = '#666666'}
                    onClick={() => setShowTemplates(false)}
                  >
                    ×
                  </button>
                </div>
                <div className="px-8 pt-6 pb-8 overflow-y-auto" style={{maxHeight: 'calc(90vh - 120px)'}}>
                  <div className={`grid gap-4 ${
                    isMobile ? 'grid-cols-2' : isTablet ? 'grid-cols-3' : 'grid-cols-5'
                  }`}>
                    {themeNames.map((themeName, idx) => (
                      <TemplateThumbnail
                        key={idx}
                        themeName={themeName}
                        onClick={() => handleSelectTemplate(idx)}
                      />
                    ))}
                  </div>
                  <div className="flex justify-center mt-8">
                    <button 
                      className="px-8 py-3 bg-white font-semibold rounded-xl border hover:shadow-lg transition-all duration-300 focus:outline-none focus:ring-4"
                      style={{ 
                        color: '#003D7A',
                        borderColor: '#E5E5E5',
                        '--tw-ring-color': 'rgba(0, 61, 122, 0.3)'
                      }}
                      onClick={() => setShowTemplates(false)}
                    >
                      Cancel
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}
      </div>
    </>
  );
}
